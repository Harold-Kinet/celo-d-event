"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
function writeContractFactoryFile(contractName, outputDir, typePath, abi, useTypeScript) {
    var functionSignature = useTypeScript
        ? "(web3: Web3, address: string): " + contractName
        : '(web3, address)';
    var asAny = useTypeScript ? ' as any' : '';
    var contents = [
        "import Web3 from 'web3'",
        "import { " + contractName + " } from '" + typePath + "/" + contractName + "'",
        "export const ABI = " + JSON.stringify(abi),
        "",
        "export function new" + contractName + functionSignature + " {",
        ' return new web3.eth.Contract(ABI, address)' + asAny,
        '}',
    ].join('\n');
    var extension = useTypeScript ? 'ts' : 'js';
    console.log(path.join(outputDir, contractName + "." + extension));
    fs.writeFileSync(path.join(outputDir, contractName + "." + extension), contents);
}
exports.writeContractFactoryFile = writeContractFactoryFile;
function getArtifact(contractName, buildDir) {
    var file = fs.readFileSync(buildDir + "/contracts/" + contractName + ".json").toString();
    return JSON.parse(file);
}
function makeContractFactories(contracts, buildDir, outputDir, typePath, useTypescript) {
    console.log('Generate Contract Factories');
    for (var _i = 0, contracts_1 = contracts; _i < contracts_1.length; _i++) {
        var contractName = contracts_1[_i];
        var contract = getArtifact(contractName, buildDir);
        writeContractFactoryFile(contractName, outputDir, typePath, contract.abi, useTypescript);
    }
}
exports.makeContractFactories = makeContractFactories;
